{"version":3,"sources":["components/Card.js","components/Timer.js","components/Intro.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","this","props","word","Fragment","answer","word1","word2","word3","word4","word5","Component","Timer","state","startTime","currentTime","undefined","Math","trunc","Date","setState","valueOf","interval","setInterval","runTime","clearInterval","nextCard","endGame","Intro","onClick","startGame","App","shuffle","deck","clonedDeck","shuffledDeck","length","randomNumber","floor","random","push","splice","e","index","currentWord","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6nqBA0BeA,G,uLAtBP,OACI,yBAAKC,UAAU,gBACVC,KAAKC,MAAMC,KACR,kBAAC,IAAMC,SAAP,KACI,4BAAKH,KAAKC,MAAMC,KAAKE,QACrB,4BACI,4BAAKJ,KAAKC,MAAMC,KAAKG,OACrB,4BAAKL,KAAKC,MAAMC,KAAKI,OACrB,4BAAKN,KAAKC,MAAMC,KAAKK,OACrB,4BAAKP,KAAKC,MAAMC,KAAKM,OACrB,4BAAKR,KAAKC,MAAMC,KAAKO,SAI7B,yBAAKV,UAAU,aACX,+C,GAjBLW,cCsCJC,E,YArCX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,UAAW,EACXC,iBAAaC,GAJP,E,uEASV,IAAMD,EAAcE,KAAKC,OAAOjB,KAAKY,MAAMC,UAAY,IAAIK,MAAU,KACrElB,KAAKmB,SAAS,CACVL,kB,0CAIa,IAAD,OACVD,GAAY,IAAIK,MAAOE,UAAY,IACzCpB,KAAKmB,SAAS,CACVN,cAEJb,KAAKqB,SAAWC,aAAY,kBAAM,EAAKC,YAAW,O,+BASlD,OAL+B,IAA3BvB,KAAKY,MAAME,cACXU,cAAcxB,KAAKqB,UACnBrB,KAAKC,MAAMwB,WACXzB,KAAKC,MAAMyB,WAGX,yBAAK3B,UAAU,SACVC,KAAKY,MAAME,iB,GAhCRJ,aCYLiB,E,iLAVP,OACI,6BACI,2CAEA,4BAAQC,QAAS5B,KAAKC,MAAM4B,WAA5B,c,GANInB,aCkFLoB,E,YA5Eb,aAAe,IAAD,8BACZ,+CAUFC,QAAU,SAACC,GAIT,IAHA,IAAIC,EAAU,YAAOD,GACjBE,EAAe,GAEZD,EAAWE,OAAS,GAAG,CAC5B,IAAIC,EAAepB,KAAKqB,MAAMrB,KAAKsB,SAAWL,EAAWE,QACzDD,EAAaK,KAAKN,EAAWG,IAC7BH,EAAWO,OAAOJ,EAAc,GAGlC,OAAOF,GArBK,EAwBdT,SAAW,SAACgB,GACV,IAAIC,EAAQ,EAAK9B,MAAM8B,MAAQ,EACzBV,EAAO,EAAKpB,MAAMoB,KAEpBU,EAAQ,EAAK9B,MAAMoB,KAAKG,OAAS,IACnCO,EAAQ,GAGV,EAAKvB,SAAS,CACZuB,QACAC,YAAaX,EAAKU,MAlCR,EAsCdb,UAAY,SAACY,GACX,EAAKtB,SAAS,CACZU,WAAW,KAxCD,EA4CdH,QAAU,SAACe,GACT,EAAKtB,SAAS,CACZU,WAAW,KA5Cb,EAAKjB,MAAQ,CACXoB,UAAMjB,EACN2B,MAAO,EACPC,iBAAa5B,EACbc,WAAW,GAND,E,iFAmDZ,IAAMK,EAAelC,KAAK+B,QAAQC,GAC5BW,EAAcT,EAAalC,KAAKY,MAAM8B,OAC5C1C,KAAKmB,SAAS,CACZa,KAAME,EACNS,YAAaA,M,+BAKf,OACE,yBAAK5C,UAAU,OACb,yBAAKA,UAAU,WACZC,KAAKY,MAAMiB,UACV,kBAAC,IAAM1B,SAAP,KACE,kBAAC,EAAD,CAAOuB,QAAS1B,KAAK0B,QAASD,SAAUzB,KAAKyB,WAC7C,kBAAC,EAAD,CAAMvB,KAAMF,KAAKY,MAAM+B,cACvB,4BAAQ5C,UAAU,aAAa6B,QAAS5B,KAAKyB,UAA7C,SAEA,kBAAC,EAAD,CAAOI,UAAW7B,KAAK6B,kB,GAtEnBnB,aCKEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df32d808.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card wrapper\">\r\n                {this.props.word ?\r\n                    <React.Fragment>\r\n                        <h1>{this.props.word.answer}</h1>\r\n                        <ul>\r\n                            <li>{this.props.word.word1}</li>\r\n                            <li>{this.props.word.word2}</li>\r\n                            <li>{this.props.word.word3}</li>\r\n                            <li>{this.props.word.word4}</li>\r\n                            <li>{this.props.word.word5}</li>\r\n                        </ul>\r\n                    </React.Fragment>\r\n                    :\r\n                    <div className=\"preloader\">\r\n                        <p>Loading...</p>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            startTime: 0,\r\n            currentTime: undefined\r\n        }\r\n    }\r\n\r\n    runTime() {\r\n        const currentTime = Math.trunc((this.state.startTime - new Date()) / 1000)\r\n        this.setState({\r\n            currentTime\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const startTime = new Date().valueOf() + 90000\r\n        this.setState({\r\n            startTime\r\n        })\r\n        this.interval = setInterval(() => this.runTime(), 100)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.currentTime === 0) {\r\n            clearInterval(this.interval)\r\n            this.props.nextCard()\r\n            this.props.endGame()\r\n        }\r\n        return (\r\n            <div className=\"timer\">\r\n                {this.state.currentTime}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer","import React, {Component} from \"react\";\r\n\r\nclass Intro extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Unspeakable</h1>\r\n                {/* <img src=\"\" alt=\"\"/> */}\r\n                <button onClick={this.props.startGame}>START</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Intro","import React, { Component } from 'react';\nimport deck from \"./deck/deck.json\"\nimport './App.css';\nimport Card from \"./components/Card.js\"\nimport Timer from \"./components/Timer.js\"\nimport Intro from \"./components/Intro.js\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      deck: undefined,\n      index: 0,\n      currentWord: undefined,\n      startGame: false\n    }\n  }\n\n\n  shuffle = (deck) => {\n    let clonedDeck = [...deck]\n    let shuffledDeck = []\n\n    while (clonedDeck.length > 0) {\n      let randomNumber = Math.floor(Math.random() * clonedDeck.length)\n      shuffledDeck.push(clonedDeck[randomNumber])\n      clonedDeck.splice(randomNumber, 1)\n    }\n\n    return shuffledDeck\n  }\n\n  nextCard = (e) => {\n    let index = this.state.index + 1\n    const deck = this.state.deck\n\n    if (index > this.state.deck.length - 1) {\n      index = 0\n    }\n\n    this.setState({\n      index,\n      currentWord: deck[index]\n    })\n  }\n\n  startGame = (e) => {\n    this.setState({\n      startGame: true,\n    })\n  }\n\n  endGame = (e) => {\n    this.setState({\n      startGame: false,\n    })\n  }\n\n  componentDidMount() {\n    const shuffledDeck = this.shuffle(deck)\n    const currentWord = shuffledDeck[this.state.index]\n    this.setState({\n      deck: shuffledDeck,\n      currentWord: currentWord\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          {this.state.startGame ? \n            <React.Fragment>\n              <Timer endGame={this.endGame} nextCard={this.nextCard}/>\n              <Card word={this.state.currentWord} />\n              <button className=\"nextButton\" onClick={this.nextCard}>NEXT</button>\n            </React.Fragment>\n            : <Intro startGame={this.startGame}/>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}